package com.orangHRM.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import org.apache.commons.io.FileUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import com.orangHRM.base.TestBase;

public class TestUtil extends TestBase {

	
	public static long PAGE_LOAD_TIMEOUT = 100;
	public static long IMPLICIT_WAIT = 1000;

	//public static String TESTDATA_SHEET_PATH = "C:\\Users\\my\\eclipse-workspace\\com.demioTest\\src\\main\\java\\com\\OrangeHRM1\\testData\\Book1.xlsx";

	public static String TESTDATA_SHEET_PATH = System.getProperty("user.dir")
			+ "\\src\\main\\java\\com\\orangHRM1\\testData\\Book1.xlsx";
	
	
	static Workbook book;
	static org.apache.poi.ss.usermodel.Sheet sheet;
	static JavascriptExecutor js;

	public void switchToFrame() {
		driver.switchTo().frame("mainpanel");
	}

	public static Object[][] getTestData(String sheetName) {
		FileInputStream file = null;
		try {
			file = new FileInputStream(TESTDATA_SHEET_PATH);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		try {
			book = WorkbookFactory.create(file);
		} catch (InvalidFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		sheet = book.getSheet(sheetName);
		Object[][] data = new Object[sheet.getLastRowNum()][sheet.getRow(0).getLastCellNum()];
		 System.out.println(sheet.getLastRowNum() + "--------" +
		 sheet.getRow(0).getLastCellNum());
		for (int i = 0; i < sheet.getLastRowNum(); i++) {
			for (int k = 0; k < sheet.getRow(0).getLastCellNum(); k++) {
				data[i][k] = sheet.getRow(i + 1).getCell(k).toString();
				 System.out.println(data[i][k]);
			}
		}
		return data;
	}

	public static String takeScreenshotAtEndOfTest() {
		TakesScreenshot ts = (TakesScreenshot) driver;

		File src = ts.getScreenshotAs(OutputType.FILE);

		String path = System.getProperty("user.dir") + "C:\\Users\\my\\eclipse-workspace\\com.OrangeHRM1Test\\Reports\\Screenshots\\" + getDate() + ".png";

		File destination = new File(path);
		try {
			FileUtils.copyFile(src, destination);

		} catch (IOException e) {
			System.out.println("Capture Failed " + e.getMessage());
		}

		return path;
		
	}


// method to get current date 
	public static String getDate() {
		long time = System.currentTimeMillis();

		SimpleDateFormat userformat = new SimpleDateFormat("MMM-dd-yyyy-HH-mm-ss");

		Date date = new Date(time);

		String newDate = userformat.format(date);

		return newDate;

	}
	
	public static String getCurrentdate() {
		long time = System.currentTimeMillis();
		SimpleDateFormat userformat = new SimpleDateFormat("MMMM dd, yyyy");
		Date date = new Date(time);
		String newDate = userformat.format(date);
		return newDate;
	}
	
	public static String autogenerateDate() {
		long time = System.currentTimeMillis();
		SimpleDateFormat userformat = new SimpleDateFormat("dd");
		Date date = new Date(time);
		String newDate = userformat.format(date);
		return newDate;

	}
	
	public static String autogenerateMonth() {
		long time = System.currentTimeMillis();
		SimpleDateFormat userformat = new SimpleDateFormat("MMM");
		Date date = new Date(time);
		String newDate = userformat.format(date);
		return newDate;

	}
	
	public static String autogenerateYear() {
		long time = System.currentTimeMillis();
		SimpleDateFormat userformat = new SimpleDateFormat("yyyy");
		Date date = new Date(time);
		String newDate = userformat.format(date);
		return newDate;

	}
	
	public static String autogenerateDayName() {
		long time = System.currentTimeMillis();
		SimpleDateFormat userformat = new SimpleDateFormat("EEEEEE");
		Date date = new Date(time);
		String newdayname = userformat.format(date);
		return newdayname;	
	}
	
	public static String autogenerateTime() {
		long time = System.currentTimeMillis();

		SimpleDateFormat userformat = new SimpleDateFormat("hh:mm aa");

		Date date = new Date(time);

		String newDate = userformat.format(date);

		//System.out.println(newDate);
		
		return newDate;
	}
	

	public static void runTimeInfo(String messageType, String message) throws InterruptedException {
		js = (JavascriptExecutor) driver;
		// Check for jQuery on the page, add it if need be
		js.executeScript("if (!window.jQuery) {"
				+ "var jquery = document.createElement('script'); jquery.type = 'text/javascript';"
				+ "jquery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js';"
				+ "document.getElementsByTagName('head')[0].appendChild(jquery);" + "}");
		Thread.sleep(5000);

		// Use jQuery to add jquery-growl to the page
		js.executeScript("$.getScript('https://the-internet.herokuapp.com/js/vendor/jquery.growl.js')");

		// Use jQuery to add jquery-growl styles to the page
		js.executeScript("$('head').append('<link rel=\"stylesheet\" "
				+ "href=\"https://the-internet.herokuapp.com/css/jquery.growl.css\" " + "type=\"text/css\" />');");
		Thread.sleep(5000);

		// jquery-growl w/ no frills
		js.executeScript("$.growl({ title: 'GET', message: '/' });");
//'"+color+"'"
		if (messageType.equals("error")) {
			js.executeScript("$.growl.error({ title: 'ERROR', message: '"+message+"' });");
		}else if(messageType.equals("info")){
			js.executeScript("$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });");
		}else if(messageType.equals("warning")){
			js.executeScript("$.growl.warning({ title: 'Warning!', message: 'your warning message goes here' });");
		}else
			System.out.println("no error message");
		// jquery-growl w/ colorized output
//		js.executeScript("$.growl.error({ title: 'ERROR', message: 'your error message goes here' });");
//		js.executeScript("$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });");
//		js.executeScript("$.growl.warning({ title: 'Warning!', message: 'your warning message goes here' });");
		Thread.sleep(5000);
	}
	
}
